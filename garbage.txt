identifier_list: ID {
    $$ = malloc(sizeof(char*));
    $$[0] = strdup($1);
}
for_loop_instructions:
                  instruction_list;
| identifier_list COLON ID {
    int size = arr_size((char**)$1);
    char** tmp = realloc($1, (size + 1) * sizeof(char*));
    if (tmp == NULL) {
        // Handle allocation failure
        yyerror("Memory allocation failed");
    }
    $$ = tmp;
    $$[size] = strdup($3);
};
lex
// {PARENTH_OPEN} {
//   // push(parenth_stack, '(');
//   return PARENTH_OPEN;
// }

// {PARENTH_CLOSE} {
//   // if (stackIsEmpty(parenth_stack)) {
//   //   exit(EXIT_FAILURE);
//   // }
//   // pop(parenth_stack);
//   return PARENTH_CLOSE;
// }

// {BRACKET_OPEN} {
//   // push(bracket_stack, '{');
//   return BRACKET_OPEN;
// }

// {BRACKET_CLOSE} {
//   // if (stackIsEmpty(bracket_stack)) {
//   //   exit(EXIT_FAILURE);
//   // }
//   // pop(bracket_stack);
//   return BRACKET_CLOSE;
// }



%type <boolean> condition expression_condition
%type <str> identifier_list 
%type <str> const_type 
%type <str> type_specifier 


lex ID
 insertSymbol(symbolTable, yytext, "UNKNOWN_TYPE", false); // Assuming a default type and not constant
  yylval.str = strdup(yytext); // Allocating memory and copying the identifier
  return ID;
   const_dec
   modifyEntry(symbolTable, $3, $2, true);
var dec 
{
                        // Add each ID to the symbol table with type and isConstant set to False
                       int size = arr_size((char**)$2);
                        for (int i = 0; i < size; i++) {
                            modifyEntry(symbolTable, $2[i], $1, false);
                            free($2[i]);
                        }
                        free($2);
                    }

expression_condition:   expression_condition logical_operator expression_condition
                    |   ID {
                    if (searchSymbol(symbolTable, $1) == NULL) {
                    yyerror("Undeclared variable used in assignment");
                    }
                    }
                    |   INTEGER {
                        $$ = $1;
                        }
                    |   REAL {
                        $$ = $1;
                        }

                    ;




arithmetic_expression: int_arithmetic_expression | float_arithmetic_expression;
int_arithmetic_expression: int_arithmetic_expression arithmetic_operator int_arithmetic_expression { 
    $$ = $1 + $3; 
                        if ($3 == 0)
                            printf("Semantic error: Division by zero at line %d\n", yylineno);
                        else
                            $$ = $1 / $3;
                         }
                    | MINUS int_arithmetic_expression %prec UMINUS { $$ = -($2); }  
                    | ID { 
                        if (searchSymbol(symbolTable, $1) == NULL) {
                            yyerror("Undeclared variable used in assignment");
                        }
                        $$ = $1; free($1);
                        }
                    | INTEGER {
                         $$ = $1;
                          }
                    ;

float_arithmetic_expression: float_arithmetic_expression arithmetic_operator float_arithmetic_expression { 
    $$ = ($1) + ($3);
     
                        if ($3 == 0)
                            printf("Semantic error: Division by zero at line %d\n", yylineno);
                        else
                            $$ = $1 / $3;
                         }
                    | MINUS float_arithmetic_expression %prec UMINUS { $$ = -($2); }  
                    | ID { 
                        if (searchSymbol(symbolTable, $1) == NULL) {
                            yyerror("Undeclared variable used in assignment");
                        }
                        $$ = atof($1); free($1);
                        }
                    | REAL { 
                        $$ = $1;
                         }
                    ;
